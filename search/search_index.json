{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Sanjana's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting Up a Dev Container for Go","text":"<ul> <li> <p>Primary author: Sanjana Gopalswamy</p> </li> <li> <p>Reviewer: Caitlin Estrada</p> </li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before getting started, ensure you have the following installed on your system:</p> <ol> <li>Visual Studio Code \u2013 A lightweight code editor that supports DevContainers.</li> <li>Docker \u2013 Required to run the DevContainer.</li> <li>VS Code Extensions:<ul> <li>Dev Containers (install from VS Code marketplace)</li> <li>Go (Made by the Go Team at Google)</li> </ul> </li> </ol>"},{"location":"tutorials/go-setup/#step-1-create-a-new-project-directory","title":"Step 1: Create a New Project Directory","text":"<p>Open the terminal, create a new directory for your project, and switch into the directory: <pre><code>mkdir comp423-go-tutorial\ncd comp423-go-tutorial\n</code></pre></p> <p>Initialize a new Git repository: <pre><code>git init\n</code></pre></p>"},{"location":"tutorials/go-setup/#step-2-add-development-container-configuration","title":"Step 2: Add Development Container Configuration","text":"<ol> <li>Open the <code>comp423-go-tutorial</code> directory in VS Code:<ul> <li>Go to File &gt; Open Folder and select your project directory.</li> </ul> </li> <li>Install the Dev Containers extension:    <ul> <li>Open the Extensions Marketplace (Ctrl+Shift+X), search for \"Dev Containers,\" and install it.</li> </ul> </li> <li>Create a <code>.devcontainer</code> directory in the project root: <pre><code>mkdir .devcontainer\n</code></pre></li> </ol> <p>Tip: </p> <p>You can also create a new file through VSCode's Explorer panel.</p> <p>Inside the <code>.devcontainer</code> directory, create a <code>devcontainer.json</code> file with the following content:</p> <pre><code>{\n  \"name\": \"COMP423 Go Tutorial\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"golang.go\"]\n    }\n  },\n  \"postCreateCommand\": \"go mod init comp423-go-tutorial\"\n}\n</code></pre>"},{"location":"tutorials/go-setup/#explanation-of-devcontainerjson","title":"Explanation of <code>devcontainer.json</code>:","text":"<ul> <li> <p><code>name</code>: Specifies a descriptive name for the DevContainer.</p> </li> <li> <p><code>image</code>: Uses Microsoft's official Go DevContainer image.</p> </li> <li> <p><code>customizations</code>: Installs the official Go extension for VS Code.</p> </li> <li> <p><code>postCreateCommand</code>: Initializes a Go module for dependency management.</p> </li> </ul>"},{"location":"tutorials/go-setup/#step-3-reopen-in-dev-container","title":"Step 3: Reopen in Dev Container","text":"<ol> <li>Open the command palette in VS Code (Cmd+Shift+P) and run: Dev Containers: Reopen in Container</li> <li>Wait for the container to build and start.</li> </ol>"},{"location":"tutorials/go-setup/#step-4-verify-go-installation","title":"Step 4: Verify Go Installation","text":"<p>Open a terminal inside the container and run: <pre><code>go version\n</code></pre></p> <p>Look Out</p> <p>Make sure it outputs a recent Go version! (i.e. Such as go version ex. Go 1.23)</p>"},{"location":"tutorials/go-setup/#step-5-create-a-hello-comp423-program","title":"Step 5: Create a Hello COMP423 Program","text":"<p>Create a new file <code>hello.go</code> in the project root with the following content: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423!\")\n}\n</code></pre></p> <p>What is this code doing?</p> <p>First it declares a main package (a package is a way to group functions, and it's made up of all the files in the same directory). Then it imports the fmt package, which contains functions for formatting text, including printing to the console. This package is one of the standard library packages you got when you installed Go. Lastly, we implement a main function to print a message to the console. A main function executes by default when you run the main package.</p>"},{"location":"tutorials/go-setup/#step-6-running-and-building-the-go-program","title":"Step 6: Running and Building the Go Program","text":"<p>Run the Go program directly, you should also get the same output below: <pre><code>go run main.go\nHello COMP423!\n</code></pre></p> <p>What does run do?</p> <p>This command compiles and runs the program in a single step!</p> <p>Build the Go program:</p> <p><pre><code>go build -o hello_comp423 main.go\n</code></pre> This generates an executable binary named <code>hello_comp423</code>.</p> <p><pre><code>./hello_comp423\n</code></pre> Unlike go run, the compiled binary does not need the Go environment to execute.</p>"},{"location":"tutorials/go-setup/#difference-between-go-run-and-go-build","title":"Difference Between <code>go run</code> and <code>go build</code>","text":"<ul> <li> <p><code>go run</code>: Compiles and runs the program temporarily without generating an executable file.</p> </li> <li> <p><code>go build</code>: Compiles the source code and produces a standalone binary, similar to using gcc for C programs.</p> </li> </ul> <p>Running the binary: Executes the compiled program without involving the Go runtime directly.</p> <p>Success!</p> <p>You have successfully set up a DevContainer for Go, written a \"Hello COMP423\" program, and learned how to run and build it. You can now continue developing Go applications within a consistent and containerized environment.</p>"},{"location":"tutorials/go-setup/#citations-resources","title":"Citations &amp; Resources","text":"<p>Go Documentation</p> <p>COMP423 MkDocs Tutorial</p>"},{"location":"tutorials/rust-setup/","title":"Setting Up a Dev Container for Rust","text":"<ul> <li>Primary author: Caitlin Estrada</li> <li>Reviewer: Sanjana Gopalswamy</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Visual Studio Code with the Microsoft Dev Containers extension</li> <li>Docker installed for creating and managing containers</li> </ul>"},{"location":"tutorials/rust-setup/#step-1-create-a-new-dev-container-project","title":"Step 1: Create a new Dev Container project","text":"<ol> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory: <code>.devcontainer/devcontainer.json</code></li> </ol>"},{"location":"tutorials/rust-setup/#step-2-create-blank-git-repository-and-initialize","title":"Step 2: Create Blank Git Repository and Initialize","text":"<ol> <li> <p>Open the terminal and create a new directory for your project:  <pre><code>mkdir comp423-rust-tutorial\ncd comp423-rust-tutorial\n</code></pre></p> </li> <li> <p>Initialize a new Git repository: <pre><code>git init\n</code></pre></p> </li> </ol>"},{"location":"tutorials/rust-setup/#step-3-dev-container-configuration","title":"Step 3: Dev Container Configuration","text":"<p>The <code>devcontainer.json</code> file defines the configuration for your development environment. Here, we're specifying the following: </p> <ul> <li>name: A descriptive name for your dev container </li> <li>image: A base image from Microsoft </li> <li>extensions: Add the <code>rust-analyzer</code> VSCode plugin by the Rust Programming Language Group</li> <li>version: Show the <code>rustc --version</code> to prove a recent version of Rust</li> </ul> <pre><code>// A sample devcontainer.json\n{\n  \"name\": \"Rust Development\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:1\",\n  \"extensions\": [\"matklad.rust-analyzer\"],\n  \"postCreateCommand\": \"rustup update &amp;&amp; rustc --version\"\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-4-create-a-new-rust-project","title":"Step 4: Create a new rust project","text":"<ol> <li>Open a new terminal</li> <li>Create a new project using Cargo:  <pre><code>cargo new my_rust_project \n</code></pre></li> <li>Navigate into your project directory:  <pre><code>cd my_rust_project\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#step-5-write-a-basic-hello-comp-423-program","title":"Step 5: Write a basic \"Hello COMP 423\" program","text":"<pre><code>// A simple Rust code block to print \"Hello, COMP423!\"\nfn main() {\n    println!(\"Hello, COMP423!\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-6-compile","title":"Step 6: Compile","text":"<p>Build your project using Cargo:  <pre><code>cargo build\n</code></pre></p> <p>What does this command do?</p> <p>It compiles your project's source code into an executable binary (if it's a binary project) or a library (if it's a library project).</p>"},{"location":"tutorials/rust-setup/#step-7-run","title":"Step 7: Run","text":"<p>Run the project using Cargo: <pre><code>cargo run\n</code></pre></p>"},{"location":"tutorials/rust-setup/#expected-output","title":"Expected Output","text":"<pre><code>Hello COMP423!\n</code></pre> <p>Bug</p> <p>Verify that this is your output to ensure you followed the tutorial correctly!</p>"},{"location":"tutorials/rust-setup/#citations-resources","title":"Citations &amp; Resources","text":"<p>Cargo Documentation</p> <p>Rust Documentation</p> <p>COMP423 MkDocs Tutorial</p>"}]}